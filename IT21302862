//IT21302862----Sri Samadhi L.A.S.S

//main.cpp
#include"User.h"
#include"Vaccines.h"
#include"Events.h"
#include"Administrator.h"
#include"unregisteredVaccinator.h"
#include"unregisteredVaccineCandidate.h"
#include"candidateAppointment.h"
#include"RegisteredVaccineCandidate.h"
#include"VaccinatorAppointment.h"
#include"RegisteredVaccinator.h"
#include"feedback.h"
#include"Reports.h"

#include <iostream>
using namespace std;

int main() {

  User*user;
  user=new User();
  user->displayDetails(); //method calling

  Vaccines*vacc;
  vacc=new Vaccines();
  vacc->displayVaccineDetails(); //method calling

  Events*event;
  event=new Events();
  event->displayEventDetails(); //method calling

  Administrator*admin;
  admin->addEvents(); //method calling
  admin->addVaccines(); //method calling

  unregisteredVaccinator*unregisteredvaccinator;
  unregisteredvaccinator->viewDetails(); //method calling

  unregisteredVaccineCandidate*unregisteredvaccinecandidate;
  unregisteredvaccinecandidate->viewDetails(); //method calling

  candidateAppointment*cappointment;
  cappointment=new candidateAppointment(); 
  cappointment->deleteCandidateAppointmentDetails(); //method calling
  cappointment->displayCandidateAppointmentDetails(); //method calling

  RegisteredVaccineCandidate*candidate;
  candidate->displayCandidateDetails(); //method calling
  candidate->addcandidateAppointment(cappointment);

  VaccinatorAppointment*vappointment;
  vappointment=new VaccinatorAppointment();
  vappointment->deleteVaccinatorAppointmentDetails(); //method calling
  vappointment->displayVaccinatorAppointmentDetails(); //method calling
  
  RegisteredVaccinator*vaccinator;
  vaccinator->displayVaccinatorDetails(); //method calling
  vaccinator->addvaccinatorAppointment(vappointment);

  feedback*Feedback;
  Feedback->displayFeedbackDetails(); //method calling
  Feedback->addfeedback(candidate);

  Reports*report;
  report=new Reports();
  report->displayVaccineStockReports(); //method calling
  report-> displayVaccinatorAppointmentDetails(); //method calling
  report->displayCandidateAppointmentDetails(); //method calling

  //Delete  dynamic objects------
  delete user;
  delete vacc;
  delete event;
  delete admin;
  delete unregisteredvaccinator;
  delete unregisteredvaccinecandidate;
  delete cappointment;
  delete candidate;
  delete vappointment;
  delete vaccinator;
  delete Feedback;
  delete report;
 
}


//Administrator.h

#include"User.h"
#include"Events.h"

class Administrator:public User{
private:
char adminID[4];
char adminPassword[6];
Events*event;
public:

Administrator(const char Pname[],const char Pemail[],const char PadminID[],const char Padminpassword[],Events*Pevent);
void addEvents();
void addVaccines();
};

//Administrator.cpp

#include"Administrator.h"
#include<cstring>

Administrator::Administrator(const char Pname[],const char Pemail[],const char PadminID[],const char Padminpassword[],Events*Pevent):User(Pname,Pemail){
  strcpy(adminID,PadminID);
  strcpy(adminPassword,Padminpassword);
  event=Pevent;
}
void Administrator::addEvents(){
  
}
void Administrator::addVaccines(){
  
}

//User.h

class User {
protected:
	char name[20];
	char email[20];
public:
	User();
	User(const char Pname[], const char Pemail[]);
	void displayDetails();
};

//User.cpp

#include"User.h"
#include<cstring>

User::User(){}
User::User(const char Pname[], const char Pemail[]){
  strcpy(name,Pname);
  strcpy(email,Pemail);
}

void User::displayDetails(){
  
}

//Events.h

#include"Vaccines.h"
#define SIZE1 3

class Events{
private:
int eventID;
char eventName[20];
char eventStartDate[10];
char eventEndDate[10];
Vaccines*vacc[SIZE1];

public:
Events();
Events(int PeventID,const char PeventName[],const char PeventStartDate[],const char PeventEndDate[]);

Events(int PvaccineID1,int PvaccineID2,int PvaccineID3,const char PvaccineName1[],const char PvaccineManufacturerCountry1[],const char PvaccineManufacturerCountry2[],const char PvaccineName2[],const char PvaccineName3[],const char PvaccineManufacturerCountry3[]);

void eventDetails(int PeventID,const char PeventName[],const char PeventStartDate[],const char PeventEndDate[]);

void displayEventDetails();
~Events();
};

//Events.cpp

#include"Events.h"
#include<cstring>

Events::Events(){}
Events::Events(int PeventID,const char PeventName[],const char PeventStartDate[],const char PeventEndDate[]){
  
  eventID=PeventID;
  strcpy(eventName,PeventName);
  strcpy(eventStartDate,PeventStartDate);
  strcpy(eventEndDate,PeventEndDate);
}
  
Events::Events(int PvaccineID1,int PvaccineID2,int PvaccineID3,const char PvaccineName1[],const char PvaccineManufacturerCountry1[],const char PvaccineManufacturerCountry2[],const char PvaccineName2[],const char PvaccineName3[],const char PvaccineManufacturerCountry3[]){
  vacc[0]=new Vaccines(PvaccineID1,PvaccineName1,PvaccineManufacturerCountry1);
  vacc[1]=new Vaccines(PvaccineID2,PvaccineName2,PvaccineManufacturerCountry2);
  vacc[2]=new Vaccines(PvaccineID3,PvaccineName3,PvaccineManufacturerCountry3);
}
void Events::eventDetails(int PeventID,const char PeventName[],const char PeventStartDate[],const char PeventEndDate[]){
  
}
void Events::displayEventDetails(){
  
}

Events::~Events(){
  for(int i=0;i<SIZE1;i++){
    delete vacc[i];
  }
}

//Vaccines.h

int vaccineID;
char vaccineName[20];
char vaccineManufacturerCountry[20];
public:
Vaccines();
Vaccines(int PvaccineID,const char PvaccineName[],const char PvaccineManufacturerCountry[]);
void displayVaccineDetails();
~Vaccines();
};

//Vaccines.cpp

#include"Vaccines.h"
#include<cstring>
Vaccines::Vaccines(){}

Vaccines::Vaccines(int PvaccineID,const char PvaccineName[],const char PvaccineManufacturerCountry[]){
  vaccineID=PvaccineID;
 strcpy(vaccineName,PvaccineName);
strcpy(vaccineManufacturerCountry,PvaccineManufacturerCountry);
}
void Vaccines::displayVaccineDetails(){
  
}
Vaccines::~Vaccines(){}

//Reports.h

#include"candidateAppointment.h"
#include"VaccinatorAppointment.h"

#define SIZE1 3
#define SIZE2 3
#define SIZE3 3


class Reports{
private:
int reportID;
char reportdate[10];
Vaccines*vacc[SIZE1];
candidateAppointment*cappointment[SIZE2];
VaccinatorAppointment*vappointment[SIZE3];

public:
Reports();
Reports(int rid,const char rdate[],Vaccines*Pvacc[],VaccinatorAppointment*Pvappointment[],candidateAppointment*Pcappointment[]);

void displayVaccineStockReports();
void displayVaccinatorAppointmentDetails();
void displayCandidateAppointmentDetails();
~Reports();
};

//Reports.cpp
#include"Reports.h"
#include<cstring>

Reports::Reports(){}
Reports::Reports(int rid,const char rdate[],Vaccines*Pvacc[],VaccinatorAppointment*Pvappointment[],candidateAppointment*Pcappointment[]){
  reportID=rid;
  strcpy(reportdate,rdate);
  
  for(int i=0;i<SIZE1;i++){
    vacc[i]=Pvacc[i];
  }
  for(int j=0;j<SIZE2;j++){
    vappointment[j]=Pvappointment[j];
  }
  for(int z=0;z<SIZE3;z++){
    cappointment[z]=Pcappointment[z];
  }
}

void Reports::displayVaccineStockReports(){}
void Reports::displayVaccinatorAppointmentDetails(){}
void Reports::displayCandidateAppointmentDetails(){}

Reports::~Reports(){
  for (int i = 0; i < SIZE1; i++)
{
delete vacc[i] ;
}
for (int j = 0; j < SIZE2; j++)
{
delete vappointment[j] ;
}
for (int z = 0; z < SIZE3; z++)
{
delete cappointment[z] ;
}
}
